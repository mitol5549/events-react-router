{"ast":null,"code":"var _jsxFileName = \"/Users/andrey/Desktop/CODE/React Course/events-react-router/frontend/src/pages/Events.js\",\n  _s = $RefreshSig$();\nimport { Await, defer, json, useLoaderData } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { Suspense } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    children: [/*#__PURE__*/_jsxDEV(Await, {\n      resolve: events,\n      children: loadedEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n        events: loadedEvents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 48\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), \";\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n}\n_s(EventsPage, \"xTcuS98fsVcq20se00iLm8bDBmQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nconst loadEvents = async () => {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    // return { isError: true, message: 'Could not fetch events.' };\n    // throw new Response(JSON.stringify({ message: 'Could not fetch events.' }), { status: 500 });\n    return json({\n      message: 'Could not fetch events.'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n};\nexport const loader = () => {\n  return defer({\n    events: loadEvents()\n  });\n};\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["Await","defer","json","useLoaderData","EventsList","Suspense","jsxDEV","_jsxDEV","EventsPage","_s","events","children","resolve","loadedEvents","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvents","response","fetch","ok","message","status","loader","$RefreshReg$"],"sources":["/Users/andrey/Desktop/CODE/React Course/events-react-router/frontend/src/pages/Events.js"],"sourcesContent":["import { Await, defer, json, useLoaderData } from 'react-router-dom';\n\nimport EventsList from '../components/EventsList';\nimport { Suspense } from 'react';\n\nfunction EventsPage() {\n  const { events } = useLoaderData();\n\n  return (\n    <Suspense>\n      <Await resolve={events}>{loadedEvents => <EventsList events={loadedEvents} />}</Await>;\n    </Suspense>\n  );\n}\n\nexport default EventsPage;\n\nconst loadEvents = async () => {\n  const response = await fetch('http://localhost:8080/events');\n\n  if (!response.ok) {\n    // return { isError: true, message: 'Could not fetch events.' };\n    // throw new Response(JSON.stringify({ message: 'Could not fetch events.' }), { status: 500 });\n    return json({ message: 'Could not fetch events.' }, { status: 500 });\n  } else {\n    return response;\n  }\n};\n\nexport const loader = () => {\n  return defer({\n    events: loadEvents(),\n  });\n};\n"],"mappings":";;AAAA,SAASA,KAAK,EAAEC,KAAK,EAAEC,IAAI,EAAEC,aAAa,QAAQ,kBAAkB;AAEpE,OAAOC,UAAU,MAAM,0BAA0B;AACjD,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM;IAAEC;EAAO,CAAC,GAAGP,aAAa,CAAC,CAAC;EAElC,oBACEI,OAAA,CAACF,QAAQ;IAAAM,QAAA,gBACPJ,OAAA,CAACP,KAAK;MAACY,OAAO,EAAEF,MAAO;MAAAC,QAAA,EAAEE,YAAY,iBAAIN,OAAA,CAACH,UAAU;QAACM,MAAM,EAAEG;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,KACxF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAU,CAAC;AAEf;AAACR,EAAA,CARQD,UAAU;EAAA,QACEL,aAAa;AAAA;AAAAe,EAAA,GADzBV,UAAU;AAUnB,eAAeA,UAAU;AAEzB,MAAMW,UAAU,GAAG,MAAAA,CAAA,KAAY;EAC7B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA,OAAOpB,IAAI,CAAC;MAAEqB,OAAO,EAAE;IAA0B,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACtE,CAAC,MAAM;IACL,OAAOJ,QAAQ;EACjB;AACF,CAAC;AAED,OAAO,MAAMK,MAAM,GAAGA,CAAA,KAAM;EAC1B,OAAOxB,KAAK,CAAC;IACXS,MAAM,EAAES,UAAU,CAAC;EACrB,CAAC,CAAC;AACJ,CAAC;AAAC,IAAAD,EAAA;AAAAQ,YAAA,CAAAR,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
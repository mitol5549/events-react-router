{"ast":null,"code":"var _jsxFileName = \"/Users/andrey/Desktop/CODE/React Course/events-react-router/frontend/src/pages/EventDetail.js\",\n  _s = $RefreshSig$();\nimport { json, redirect, useRouteLoaderData } from 'react-router-dom';\nimport EventItem from '../components/EventItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EventDetailPage() {\n  _s();\n  const data = useRouteLoaderData('event-detail');\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(EventItem, {\n      event: data.event\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), \";\"]\n  }, void 0, true);\n}\n_s(EventDetailPage, \"4DBW6nwrvXRMSwRBgIay5Sszcp8=\", false, function () {\n  return [useRouteLoaderData];\n});\n_c = EventDetailPage;\nexport default EventDetailPage;\nconst loadEvent = async () => {};\nconst loadEvents = async () => {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    // return { isError: true, message: 'Could not fetch events.' };\n    // throw new Response(JSON.stringify({ message: 'Could not fetch events.' }), { status: 500 });\n    return json({\n      message: 'Could not fetch events.'\n    }, {\n      status: 500\n    });\n  } else {\n    const resData = await response.json();\n    return resData.events;\n  }\n};\nexport async function loader({\n  request,\n  params\n}) {\n  const id = params.eventId;\n  const response = await fetch('http://localhost:8080/events/' + id);\n  if (!response.ok) {\n    throw json({\n      message: 'Could not fetch details for selected event.'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport const action = async ({\n  params,\n  request\n}) => {\n  const id = params.eventId;\n  const response = await fetch('http://localhost:8080/events/' + id, {\n    method: request.method\n  });\n  if (!response.ok) {\n    throw json({\n      message: 'Could not delete event.'\n    }, {\n      status: 500\n    });\n  } else {\n    return redirect('/events');\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"EventDetailPage\");","map":{"version":3,"names":["json","redirect","useRouteLoaderData","EventItem","jsxDEV","_jsxDEV","Fragment","_Fragment","EventDetailPage","_s","data","children","event","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvent","loadEvents","response","fetch","ok","message","status","resData","events","loader","request","params","id","eventId","action","method","$RefreshReg$"],"sources":["/Users/andrey/Desktop/CODE/React Course/events-react-router/frontend/src/pages/EventDetail.js"],"sourcesContent":["import { json, redirect, useRouteLoaderData } from 'react-router-dom';\n\nimport EventItem from '../components/EventItem';\n\nfunction EventDetailPage() {\n  const data = useRouteLoaderData('event-detail');\n\n  return (\n    <>\n      <EventItem event={data.event} />;\n    </>\n  );\n}\n\nexport default EventDetailPage;\n\nconst loadEvent = async () => {\n  \n}\n\nconst loadEvents = async () => {\n  const response = await fetch('http://localhost:8080/events');\n\n  if (!response.ok) {\n    // return { isError: true, message: 'Could not fetch events.' };\n    // throw new Response(JSON.stringify({ message: 'Could not fetch events.' }), { status: 500 });\n    return json({ message: 'Could not fetch events.' }, { status: 500 });\n  } else {\n    const resData = await response.json();\n    return resData.events;\n  }\n};\n\nexport async function loader({ request, params }) {\n  const id = params.eventId;\n\n  const response = await fetch('http://localhost:8080/events/' + id);\n\n  if (!response.ok) {\n    throw json(\n      { message: 'Could not fetch details for selected event.' },\n      {\n        status: 500,\n      },\n    );\n  } else {\n    return response;\n  }\n}\n\nexport const action = async ({ params, request }) => {\n  const id = params.eventId;\n\n  const response = await fetch('http://localhost:8080/events/' + id, {\n    method: request.method,\n  });\n\n  if (!response.ok) {\n    throw json(\n      { message: 'Could not delete event.' },\n      {\n        status: 500,\n      },\n    );\n  } else {\n    return redirect('/events');\n  }\n};\n"],"mappings":";;AAAA,SAASA,IAAI,EAAEC,QAAQ,EAAEC,kBAAkB,QAAQ,kBAAkB;AAErE,OAAOC,SAAS,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEhD,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACzB,MAAMC,IAAI,GAAGR,kBAAkB,CAAC,cAAc,CAAC;EAE/C,oBACEG,OAAA,CAAAE,SAAA;IAAAI,QAAA,gBACEN,OAAA,CAACF,SAAS;MAACS,KAAK,EAAEF,IAAI,CAACE;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,KAClC;EAAA,eAAE,CAAC;AAEP;AAACP,EAAA,CARQD,eAAe;EAAA,QACTN,kBAAkB;AAAA;AAAAe,EAAA,GADxBT,eAAe;AAUxB,eAAeA,eAAe;AAE9B,MAAMU,SAAS,GAAG,MAAAA,CAAA,KAAY,CAE9B,CAAC;AAED,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;EAC7B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA,OAAOtB,IAAI,CAAC;MAAEuB,OAAO,EAAE;IAA0B,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACtE,CAAC,MAAM;IACL,MAAMC,OAAO,GAAG,MAAML,QAAQ,CAACpB,IAAI,CAAC,CAAC;IACrC,OAAOyB,OAAO,CAACC,MAAM;EACvB;AACF,CAAC;AAED,OAAO,eAAeC,MAAMA,CAAC;EAAEC,OAAO;EAAEC;AAAO,CAAC,EAAE;EAChD,MAAMC,EAAE,GAAGD,MAAM,CAACE,OAAO;EAEzB,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,GAAGS,EAAE,CAAC;EAElE,IAAI,CAACV,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAMtB,IAAI,CACR;MAAEuB,OAAO,EAAE;IAA8C,CAAC,EAC1D;MACEC,MAAM,EAAE;IACV,CACF,CAAC;EACH,CAAC,MAAM;IACL,OAAOJ,QAAQ;EACjB;AACF;AAEA,OAAO,MAAMY,MAAM,GAAG,MAAAA,CAAO;EAAEH,MAAM;EAAED;AAAQ,CAAC,KAAK;EACnD,MAAME,EAAE,GAAGD,MAAM,CAACE,OAAO;EAEzB,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,GAAGS,EAAE,EAAE;IACjEG,MAAM,EAAEL,OAAO,CAACK;EAClB,CAAC,CAAC;EAEF,IAAI,CAACb,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAMtB,IAAI,CACR;MAAEuB,OAAO,EAAE;IAA0B,CAAC,EACtC;MACEC,MAAM,EAAE;IACV,CACF,CAAC;EACH,CAAC,MAAM;IACL,OAAOvB,QAAQ,CAAC,SAAS,CAAC;EAC5B;AACF,CAAC;AAAC,IAAAgB,EAAA;AAAAiB,YAAA,CAAAjB,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}